#!/usr/bin/env node

var program = require('commander');
var util = require('util');
var jqfy = require('../index');
var fs = require('fs');
var path = require('path');
var glob = require("glob");

function list(val) {
    return val.split(',').map(Number);
}

program
    .version(jqfy.version)
    .option('-i, --input [path]', 'source file or directory (default: .)', '.')
    .option('-o, --output [path]', 'destination file')
    .option('-r, --return-type [type]', 'choice return type (root|contents|html)')
    .option('-e, --ext [ext]', 'extensions (default: html)', 'html')
    .option('-n, --namespace [namespace]', 'namespace (default: templates)', 'templates')
    .option('--fix-return-type', 'fix return type of generated function')
    .option('--return-object', 'return object, output in $ property of object')
    .option('--use-shortcut-functions', 'use shortcut functions in generated function')
    .option('-T, --no-trim', 'do not trim')
    .option('-C, --no-comment', 'ignore comments')
    .parse(process.argv);

if (process.argv.length == 2) {
    program.help();
}

function compileFile(file, name) {
    if (fs.statSync(file).isDirectory()) {
        return;
    }
    var content = fs.readFileSync(file, 'utf-8');
    jqfy.append(content, {
        name: name,
        _path: file
    });
    console.error('compile', file);
}

function _loader(src, file) {
    var jsFile = '';
    if (src.indexOf('/') === 0) {
        jsFile = path.join(program.input, src);
    } else {
        jsFile = path.resolve(path.dirname(file), src);
    }
    if (!fs.existsSync(jsFile)) {

        throw new Error(util.format('referenced JS file in %s dose not exists (%s)', file, src));
    }
    if (fs.statSync(jsFile).isDirectory()) {
        throw new Error(util.format('referenced JS file in %s is directory (%s)', file, src));
    }
    return fs.readFileSync(jsFile, 'utf-8');
}

var pattern = path.normalize(program.input + '/**/*.' + program.ext);
var files = glob.sync(pattern);
var inputLength = path.normalize(program.input).split('/').length;
files.forEach(function (file) {
    var name = file.split('/').slice(inputLength - 1);
    name[name.length - 1] = path.basename(name[name.length - 1], '.' + program.ext);
    compileFile(file, name);
});

var opts = {
    trim: program.trim,
    comment: program.comment,
    returnType: program.returnType,
    useShortcutFunctions: program.useShortcutFunctions,
    fixReturnType: program.fixReturnType,
    returnObject: program.returnObject,
    _loader: _loader
};


try {
    var code = jqfy.getCode(program.namespace, opts);

    if (program.output) {
        fs.writeFileSync(program.output, code);
    } else {
        process.stdout.write(code);
    }
} catch (e) {
    console.error('\033[91m' + e.message + '\033[39m');
}
