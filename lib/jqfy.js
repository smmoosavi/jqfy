var _ = require('lodash');
var util = require('util');
var CodeGen = require('./codeGen');
var cheerio = require('cheerio');

function compile(html, opts) {
    opts = _.extend({
        output: 'children', // html, root, children
        trim: true, // true, false
        comment: true, // true, false
        script: false // false TODO not supported yet
    }, opts);
    var name = opts.name;
    var cg = new CodeGen();
    var commentIndent = 0;
    var counts = {};

    function generate(node, parentCtx) {
        if (parentCtx == undefined) {
            parentCtx = {};
        }
        var ctx = {};
        var variable;
        ctx.pre = parentCtx.pre;
        if (node.type == 'root') {
            variable = '$root';
        }
        if (node.type == 'tag') {
            cg.raw();
            if (counts[node.name] == undefined) {
                counts[node.name] = 1;
            }
            variable = '$' + node.name + counts[node.name];
            counts[node.name] += 1;
            cg.raw(util.format("var %s = $('<%s/>')", variable, node.name));
            cg.incIndent();
            if (node.attribs['id']) {
                cg.raw(util.format('.attr(%s, %s)', JSON.stringify('id'), JSON.stringify(node.attribs['id'])));
            }

            if (node.attribs['class']) {
                cg.raw(util.format('.addClass(%s)', JSON.stringify(node.attribs['class'])));
            }

            Object.keys(node.attribs).forEach(function (a) {
                var v = node.attribs[a];
                if (a == 'class') {
                    return;
                }
                if (a == 'id') {
                    return;
                }
                cg.raw(util.format('.attr(%s, %s)', JSON.stringify(a), JSON.stringify(v)));
            });
            cg.raw(util.format('.appendTo(%s);', parentCtx.parent));
            cg.decIndent();
            if (node.name == 'pre') {
                ctx.pre = true;
            }
        }
        if (node.type == 'text') {
            var text = node.data;

            if (opts.trim && !ctx.pre) {
                text = text.trim();
            }

            if (text) {
                var value = JSON.stringify(text);
                cg.raw(util.format('%s.append(document.createTextNode(%s));', parentCtx.parent, value));
            }
        }
        if (node.type == 'comment') {
            if (opts.comment) {
                cg.raw(util.format('%s.append(document.createComment(%s));', parentCtx.parent, JSON.stringify(node.data)));
            }
        }
        if (node.type == 'script') {
            return;
        }
        console.log(new Array(commentIndent).join(' '), node.type);
        ctx['parent'] = variable;
        if (node.children) {
            commentIndent++;
            node.children.forEach(function (child) {
                generate(child, ctx);
            });
            cg.comment(new Array(commentIndent).join(' ') + 'end ' + variable);
            commentIndent--;
        }

    }

    var ch = cheerio.load(html);

    cg.functionStart(name);
    cg.comment('generated by jgfy');
    cg.raw("var $root = $('<div/>');");
    generate(ch._root);
    switch (opts.output) {
        case 'html':
            cg.raw("return $root.html();");
            break;
        case 'root':
            cg.raw("return $root;");
            break;
        case 'children':
        default :
            cg.raw("return $root.children();");
    }

    cg.functionEnd();
    return cg.getCode();
}

module.exports.compile = compile;