var _ = require('lodash');
var util = require('util');
var CodeGen = require('./codeGen');
var cheerio = require('cheerio');

function JQfy() {
    var jqfy = this;

    jqfy.compile = function (html, opts) {
        opts = _.extend({
            returnType: 'children', // html, root, children
            trim: true, // true, false
            comment: true, // true, false
            script: false // false TODO not supported yet
        }, opts);
        var name = opts.name;
        var cg = new CodeGen();
        var commentIndent = 0;
        var counts = {};

        function generate(node, parentCtx) {
            if (parentCtx === undefined) {
                parentCtx = {};
            }
            var ctx = {};
            var variable;
            ctx.pre = parentCtx.pre;
            if (node.type == 'root') {
                variable = '$root';
            }
            if (node.type == 'tag') {
                cg.raw();
                if (counts[node.name] === undefined) {
                    counts[node.name] = 1;
                }
                variable = '$' + node.name + counts[node.name];
                counts[node.name] += 1;
                cg.raw(util.format("var %s = $('<%s/>')", variable, node.name));
                cg.incIndent();
                if (node.attribs.id) {
                    cg.raw(util.format('.attr(%s, %s)', JSON.stringify('id'), JSON.stringify(node.attribs.id)));
                }

                if (node.attribs['class']) {
                    cg.raw(util.format('.addClass(%s)', JSON.stringify(node.attribs['class'])));
                }

                Object.keys(node.attribs).forEach(function (a) {
                    var v = node.attribs[a];
                    if (a == 'class') {
                        return;
                    }
                    if (a == 'id') {
                        return;
                    }
                    cg.raw(util.format('.attr(%s, %s)', JSON.stringify(a), JSON.stringify(v)));
                });
                cg.raw(util.format('.appendTo(%s);', parentCtx.parent));
                cg.decIndent();
                if (node.name == 'pre') {
                    ctx.pre = true;
                }
            }
            if (node.type == 'text') {
                var text = node.data;

                if (opts.trim && !ctx.pre) {
                    text = text.trim();
                }

                if (text) {
                    var value = JSON.stringify(text);
                    cg.raw(util.format('%s.append(document.createTextNode(%s));', parentCtx.parent, value));
                }
            }
            if (node.type == 'comment') {
                if (opts.comment) {
                    cg.raw(util.format('%s.append(document.createComment(%s));', parentCtx.parent, JSON.stringify(node.data)));
                }
            }
            if (node.type == 'script') {
                return;
            }
            ctx.parent = variable;
            if (node.children) {
                commentIndent++;
                node.children.forEach(function (child) {
                    generate(child, ctx);
                });
                cg.comment(new Array(commentIndent).join(' ') + 'end ' + variable);
                commentIndent--;
            }

        }

        var ch = cheerio.load(html);

        cg.functionStart(name, ['data', 'opts']);
        cg.comment('generated by jQfy');

        cg.raw('opts = $.extend({},opts);');

        cg.raw("var $root = $('<div/>');");
        generate(ch._root);

        var d = "";
        switch (opts.returnType) {
            case 'html':
                d = "return $root.html();\n";
                break;
            case 'root':
                d = "return $root;\n";
                break;
            case 'children':
                d = "return $root.children();\n";
                break;
            default :
                d = "return $root.children();\n";
        }

        var c = "switch (opts.returnType) {\n" +
            "    case 'html':\n" +
            "        return $root.html();\n" +
            "    case 'root':\n" +
            "        return $root;\n" +
            "    case 'children':\n" +
            "        return $root.children();\n" +
            "    default :\n" +
            "        " + d +
            "}";
        cg.raw(c);
        cg.functionEnd();
        return cg.getCode();
    };


    var memory = new CodeGen();
    jqfy.append = function (html, opts) {
        var code = jqfy.compile(html, opts);
        memory.raw(code);
        memory.raw();
    };
    jqfy.getCode = function (name) {
        var output = new CodeGen();
        var nameParam = '';
        if (name) {
            nameParam = JSON.stringify(name) + ', ';
        }
        var moduleName = 'templates';
        if (name) {
            moduleName = name;
        }

        var umdBegin = "(function(root, factory) {\n" +
            output.getIndent(1) + "if (typeof define === 'function' && define.amd) {\n" +
            output.getIndent(2) + "define(" + nameParam + "['jquery'], factory);\n" +
            output.getIndent(1) + "} else if (typeof exports === 'object') {\n" +
            output.getIndent(2) + "module.exports = factory(require('jquery'));\n" +
            output.getIndent(1) + "} else {\n" +
            output.getIndent(2) + "root." + moduleName + " = factory(jQuery);\n" +
            output.getIndent(1) + "}\n" +
            "})(this, function($) {";
        var umdEnd = "});";
        output.raw(umdBegin);
        output.incIndent();
        output.raw(moduleName + ' = {}');
        output.raw(memory.getCode());

        output.raw('return templates;');
        output.decIndent();
        output.raw(umdEnd);
        return output.getCode();
    };

    jqfy.flush = function () {
        memory = new CodeGen();
    };
}

module.exports = new JQfy();